
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Mock Supabase client for local development
// We're not connecting to a real Supabase instance anymore
const SUPABASE_URL = "https://example.com";
const SUPABASE_PUBLISHABLE_KEY = "mock-key";

// Creating a mock client that won't actually connect to Supabase
// but will satisfy the type requirements for the rest of the app
const mockClient = {
  auth: {
    signInWithPassword: () => Promise.resolve({ data: null, error: null }),
    signUp: () => Promise.resolve({ data: null, error: null }),
    signOut: () => Promise.resolve({ error: null }),
    getSession: () => Promise.resolve({ data: { session: null } }),
    onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } }),
  },
  from: () => ({
    select: () => ({
      eq: () => ({
        single: () => Promise.resolve({ data: null, error: null }),
        maybeSingle: () => Promise.resolve({ data: null, error: null }),
      }),
      in: () => Promise.resolve({ data: null, error: null }),
    }),
    insert: () => ({
      select: () => ({
        single: () => Promise.resolve({ data: null, error: null }),
      }),
    }),
    update: () => ({
      eq: () => Promise.resolve({ data: null, error: null }),
      select: () => ({
        single: () => Promise.resolve({ data: null, error: null }),
      }),
    }),
    delete: () => ({
      eq: () => Promise.resolve({ data: null, error: null }),
    }),
  }),
};

// Export a mock supabase client that won't actually connect to Supabase
export const supabase = mockClient as unknown as ReturnType<typeof createClient<Database>>;
